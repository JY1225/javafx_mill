package cn.greatoo.easymill.ui.set.cnc;

import cn.greatoo.easymill.db.util.DBHandler;
import cn.greatoo.easymill.entity.Program;
import cn.greatoo.easymill.entity.WorkPiece;
import cn.greatoo.easymill.util.NumericTextField;
import cn.greatoo.easymill.util.TextInputControlListener;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.TextInputControl;
import javafx.scene.layout.GridPane;

public class CNCFinishedWPViewController implements TextInputControlListener {
	@FXML
	private GridPane generalGridPane;
	@FXML
	private NumericTextField fullnumL;
	@FXML
	private NumericTextField fullnumW;
	@FXML
	private NumericTextField fullnumH;
	@FXML
	private Button hResetBt;
	@FXML
	private NumericTextField fullnumWT;
	@FXML
	private Button calculateBt;
	@FXML
	private Button resetBt;
	@FXML
	private Button wResetBt;
	@FXML
	private Button LResetBt;

	public static WorkPiece workPiece = new WorkPiece();

	public void init() {
		String programName = DBHandler.getInstance().getProgramName();
		if (programName != null) {
			Program program = DBHandler.getInstance().getProgramBuffer().get(programName);
			workPiece = program.getLoadstacker().getWorkPiece();
			fullnumL.setText(String.valueOf(workPiece.getLength()));
			fullnumW.setText(String.valueOf(workPiece.getWidth()));
			fullnumH.setText(String.valueOf(workPiece.getHeight()));
			fullnumWT.setText(String.valueOf(workPiece.getWeight()));
		}
		workPiece.setType(WorkPiece.Type.FINISHED);
		fullnumL.focusedProperty().addListener(new ChangeListener<Boolean>() {
			@Override
			public void changed(ObservableValue<? extends Boolean> arg0, Boolean arg1, Boolean arg2) {
				workPiece.setLength(Float.parseFloat(fullnumL.getText()));
			}
		});

		fullnumW.focusedProperty().addListener(new ChangeListener<Boolean>() {
			@Override
			public void changed(ObservableValue<? extends Boolean> arg0, Boolean arg1, Boolean arg2) {
				workPiece.setWidth(Float.parseFloat(fullnumW.getText()));
			}
		});

		fullnumH.focusedProperty().addListener(new ChangeListener<Boolean>() {
			@Override
			public void changed(ObservableValue<? extends Boolean> arg0, Boolean arg1, Boolean arg2) {
				workPiece.setHeight(Float.parseFloat(fullnumH.getText()));
			}
		});

		fullnumWT.focusedProperty().addListener(new ChangeListener<Boolean>() {
			@Override
			public void changed(ObservableValue<? extends Boolean> arg0, Boolean arg1, Boolean arg2) {
				workPiece.setWeight(Float.parseFloat(fullnumWT.getText()));
			}
		});
		setTextFieldListener(this);
	}

	@FXML
	public void hResetBtAction(ActionEvent event) {

	}

	@FXML
	public void calculateBtAction(ActionEvent event) {
		workPiece.setWeight(Float.parseFloat(fullnumWT.getText()));
	}

	// Event Listener on Button[#resetBt].onAction
	@FXML
	public void resetBtAction(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Button[#wResetBt].onAction
	@FXML
	public void wResetBtAction(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Button[#LResetBt].onAction
	@FXML
	public void LResetBtAction(ActionEvent event) {
		// TODO Autogenerated
	}



	public void setTextFieldListener(final TextInputControlListener listener) {
		fullnumL.setFocusListener(listener);
		fullnumW.setFocusListener(listener);
		fullnumH.setFocusListener(listener);
		fullnumWT.setFocusListener(listener);
	}

	@Override
	public void closeKeyboard() {
		// TODO Auto-generated method stub

	}

	@Override
	public void textFieldFocussed(TextInputControl textInputControl) {
		// TODO Auto-generated method stub

	}

	@Override
	public void textFieldLostFocus(TextInputControl textInputControl) {
		// TODO Auto-generated method stub

	}
}
